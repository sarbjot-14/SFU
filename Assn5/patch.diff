diff -rupN ../cmpt300/linuxv4.13/arch/x86/entry/syscalls/syscall_64.tbl linux-4.13/arch/x86/entry/syscalls/syscall_64.tbl
--- ../cmpt300/linuxv4.13/arch/x86/entry/syscalls/syscall_64.tbl	2017-09-03 13:56:17.000000000 -0700
+++ linux-4.13/arch/x86/entry/syscalls/syscall_64.tbl	2019-07-29 18:59:12.000000000 -0700
@@ -339,6 +339,9 @@
 330	common	pkey_alloc		sys_pkey_alloc
 331	common	pkey_free		sys_pkey_free
 332	common	statx			sys_statx
+341	common	array_stats		sys_array_stats
+342     common  process_ancestors	sys_process_ancestors
+
 
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
Binary files ../cmpt300/linuxv4.13/cs300/array_stats and linux-4.13/cs300/array_stats differ
diff -rupN ../cmpt300/linuxv4.13/cs300/array_stats.c linux-4.13/cs300/array_stats.c
--- ../cmpt300/linuxv4.13/cs300/array_stats.c	1969-12-31 16:00:00.000000000 -0800
+++ linux-4.13/cs300/array_stats.c	2019-08-01 16:37:53.000000000 -0700
@@ -0,0 +1,68 @@
+#include "array_stats.h"
+
+#include <linux/kernel.h>
+#include <linux/uaccess.h>
+#include <linux/slab.h>
+
+
+
+asmlinkage long sys_array_stats(struct array_stats *stats,long data[],long size);
+
+asmlinkage long sys_array_stats(struct array_stats *stats,long data[],long size){
+	//printk("im in the SYSTEM CALL NOW\n");
+        //copy one value at a time from the user’s data array into this variable
+	long temp = 0; 
+	int errorCheck=1;
+	int i = 0;
+
+	// Compute the correct values in this struct first, 
+	//then at the very end use copy_to_use() to copy the contents to user’s pointer.
+	struct array_stats* stats_kern = kmalloc(sizeof(struct array_stats),GFP_KERNEL) ; 
+
+
+	//printk("size is %ld\n", size);
+	if(size <= 0){
+		printk("returning size is < 0 -EINVAL");
+		return -EINVAL;
+	}
+	//printk("initializing temp\n");
+	//to initialize stats_kern
+	errorCheck = copy_from_user(&temp, &data[0], sizeof(long) );
+	if(errorCheck != 0){
+		printk("copy to temp for init failed\n");
+		return -EFAULT;
+	}
+	//printk("initializing stats_kern\n");
+	stats_kern->min = temp;
+	stats_kern->max = temp;
+	stats_kern->sum = 0;
+
+	//printk("beginning the for loop\n");
+	for(i = 0; i<size; i++){
+		errorCheck = copy_from_user(&temp, &data[i], sizeof(long) );
+		if(errorCheck != 0){
+			printk("copy to temp failed\n");
+			return -EFAULT;
+		}
+		//printk("copied to temp %ld\n", temp);
+
+		if(temp < stats_kern->min){
+			stats_kern->min = temp;
+		}
+
+		if(temp > stats_kern->max){
+			stats_kern->max = temp;
+		}
+		
+		stats_kern->sum += temp;
+	}
+	printk("min: %ld, max: %ld, sum: %ld\n", stats_kern->min, stats_kern->max, stats_kern->sum);
+	//printk("finally copying back to user struc\n");
+	//use copy_to_user() to copy the contents to user’s pointer.
+	errorCheck = copy_to_user(stats, stats_kern, sizeof(struct array_stats) );
+	if(errorCheck != 0){
+		printk("copy stats structure failed\n");
+		return -EFAULT;
+	}
+	return 0;		
+}
diff -rupN ../cmpt300/linuxv4.13/cs300/array_stats.h linux-4.13/cs300/array_stats.h
--- ../cmpt300/linuxv4.13/cs300/array_stats.h	1969-12-31 16:00:00.000000000 -0800
+++ linux-4.13/cs300/array_stats.h	2019-07-26 15:07:14.000000000 -0700
@@ -0,0 +1,12 @@
+// Define the array_stats struct for the array_stats sys-call.
+#ifndef _ARRAY_STATS_H_
+#define _ARRAY_STATS_H_
+
+struct array_stats{
+    long min;
+    long max;
+    long sum;
+};
+
+#endif
+
diff -rupN ../cmpt300/linuxv4.13/cs300/Makefile linux-4.13/cs300/Makefile
--- ../cmpt300/linuxv4.13/cs300/Makefile	1969-12-31 16:00:00.000000000 -0800
+++ linux-4.13/cs300/Makefile	2019-07-29 18:39:23.000000000 -0700
@@ -0,0 +1,2 @@
+obj-y := process_ancestors.o array_stats.o
+
diff -rupN ../cmpt300/linuxv4.13/cs300/process_ancestors.c linux-4.13/cs300/process_ancestors.c
--- ../cmpt300/linuxv4.13/cs300/process_ancestors.c	1969-12-31 16:00:00.000000000 -0800
+++ linux-4.13/cs300/process_ancestors.c	2019-08-06 16:52:41.637700229 -0700
@@ -0,0 +1,110 @@
+#include "process_ancestors.h"
+#include <linux/uaccess.h>
+#include <linux/kernel.h>
+#include <linux/slab.h>
+#include <linux/sched.h>
+#include <linux/string.h>
+#include <linux/cred.h>
+#include <linux/uidgid.h>
+#include <linux/types.h>
+
+
+#include <linux/uaccess.h>
+#include <linux/slab.h>
+
+//REMOVE ALL PRINT STATEMENTS WHEN CLEANING
+
+
+asmlinkage long sys_process_ancestors(struct process_info info_array[],long size,long *num_filled);
+
+asmlinkage long sys_process_ancestors(struct process_info info_array[],long size,long *num_filled){
+
+	struct process_info info_array_kern[size]; 
+
+	struct task_struct* curr_task = current;
+
+	long num_filled_kern = 0;
+
+	int errorCheck=1;
+	int errorCheck_num = 1;
+	long count = 0;
+	int sibling_flag = 0;
+	char* p_name;
+	int32_t user_id = 0;
+	struct list_head* start_node;
+	struct list_head* curr_node; 
+	
+
+
+	if(size <= 0){
+		
+		printk("returning size is < 0 -EINVAL");
+		return -EINVAL;
+	}
+
+	
+	while(curr_task->parent != curr_task){
+		
+
+		info_array_kern[count].pid = curr_task->pid;
+		p_name = curr_task->comm;
+		strcpy(info_array_kern[count].name, p_name);  	
+		info_array_kern[count].state = curr_task->state;
+		user_id = current_uid().val;
+		info_array[count].uid = user_id;
+		info_array_kern[count].nvcsw = curr_task->nvcsw;
+		info_array_kern[count].nivcsw = curr_task->nivcsw;
+		
+		info_array_kern[count].num_children = 0;
+		start_node = &(curr_task->children);
+		curr_node = start_node->next;
+
+		while(curr_node != start_node){
+			
+			curr_node = curr_node->next;
+			info_array_kern[count].num_children++;
+		}
+
+		info_array_kern[count].num_siblings = 0;
+		sibling_flag = 1;
+		start_node = &(curr_task->sibling);
+		curr_node = start_node->next;
+
+		while(curr_node != start_node){
+			
+			if(sibling_flag){
+				curr_node = curr_node->next;
+			}
+
+			else{
+				curr_node = curr_node->next;
+				info_array_kern[count].num_siblings++;
+			}
+
+			sibling_flag = 0;
+
+		}
+			
+		//printk("\t parent is:  \"%s\" (pid: %ld) (state: %ld) (uid: %hu) (context switches: %ld) (inv. context switches: %ld) (#children: %ld) (#siblings: %ld)\n", info_array_kern[count].name, info_array_kern[count].pid, info_array_kern[count].state, info_array_kern[count].uid, info_array_kern[count].nvcsw, info_array_kern[count].nivcsw, info_array_kern[count].num_children, info_array_kern[count].num_siblings);
+		
+		curr_task = curr_task->parent;
+		count++;		
+	}
+
+	num_filled_kern = count;
+
+
+	errorCheck = copy_to_user(info_array, info_array_kern, size*sizeof(struct process_info ) );
+	if(errorCheck != 0){
+		printk("copy stats structure failed\n");
+		return -EFAULT;
+	}
+
+	errorCheck_num = copy_to_user(num_filled, &num_filled_kern, sizeof(long));
+	if(errorCheck_num != 0){
+		printk("copy num_filled failed\n");
+		return -EFAULT;
+	}
+	
+ return 0;
+}
diff -rupN ../cmpt300/linuxv4.13/cs300/process_ancestors.h linux-4.13/cs300/process_ancestors.h
--- ../cmpt300/linuxv4.13/cs300/process_ancestors.h	1969-12-31 16:00:00.000000000 -0800
+++ linux-4.13/cs300/process_ancestors.h	2019-07-28 14:02:42.000000000 -0700
@@ -0,0 +1,17 @@
+// Structure to hold values returned by process_ancestors sys-call
+#ifndef _PROCESS_ANCESTORS_H
+#define _PROCESS_ANCESTORS_H
+
+#define ANCESTOR_NAME_LEN 16
+struct process_info {
+    long pid;                     /* Process ID */
+    char name[ANCESTOR_NAME_LEN]; /* Program name of process */
+    long state;                   /* Current process state */
+    long uid;                     /* User ID of process owner */
+    long nvcsw;                   /* # voluntary context switches */
+    long nivcsw;                  /* # involuntary context switches */
+    long num_children;            /* # children process has */
+    long num_siblings;            /* # sibling process has */
+};
+
+#endif
diff -rupN ../cmpt300/linuxv4.13/cs300/savedit.c linux-4.13/cs300/savedit.c
--- ../cmpt300/linuxv4.13/cs300/savedit.c	1969-12-31 16:00:00.000000000 -0800
+++ linux-4.13/cs300/savedit.c	2019-07-30 16:41:48.000000000 -0700
@@ -0,0 +1,94 @@
+#include "process_ancestors.h"
+//#include <linux/uaccess.h>
+#include <linux/kernel.h>
+#include <linux/slab.h>
+#include <linux/sched.h>
+#include <linux/string.h>
+#include <linux/cred.h>
+#include <linux/uidgid.h>
+
+
+#include <linux/uaccess.h>
+#include <linux/slab.h>
+
+
+asmlinkage long sys_process_ancestors(struct process_info info_array[],long size,long *num_filled);
+
+asmlinkage long sys_process_ancestors(struct process_info info_array[],long size,long *num_filled){
+
+	struct process_info info_array_kern[];
+		int i = 0;
+	for(i = 0; i < size; i++){
+	info_array_kern[i] = kmalloc(sizeof(struct process_info),GFP_KERNEL) ;
+	}
+	struct task_struct* curr_task = current;
+	int errorCheck=1;
+	//const struct cred *cred = current_cred();
+
+	if(size <= 0){
+		printk("returning size is < 0 -EINVAL");
+		return -EINVAL;
+	}
+
+	int count = 0;
+
+	printk("INSIDE SYS_PROCESS_ANCESTORS\n");
+	printk("size var is %ld\n", size);
+	printk("The process is \"%s\" (pid %i)\n",current->comm, current->pid);
+	
+
+	//info_array[count].pid = current->pid;
+	//info_array[count]
+	/*for(i = 0; i < size; i++){
+		info_array_kern[i].pid = kmalloc(sizeof(long), GFP_KERNEL);
+	}*/
+
+	/*errorCheck = copy_from_user(info_array_kern, info_array, sizeof(struct process_info) );
+		
+		if(errorCheck != 0){
+			printk("copy to temp for init failed\n");
+		return -EFAULT;
+		}
+
+	for(i = 0; i < size; i++){
+		errorCheck = copy_from_user(&info_array_kern[i], &info_array[i], sizeof(struct process_info) );
+		
+		if(errorCheck != 0){
+			printk("copy to temp for init failed\n");
+		return -EFAULT;
+		}
+	}*/
+	
+	//info_array[0].pid = current->pid;
+	
+	while(curr_task->parent != curr_task){
+
+		curr_task = curr_task->parent;
+		count++;
+		info_array_kern[count].pid = curr_task->pid;
+		//strcpy(info_array[count].name, *(curr_task).comm);   //HOW TO COPY STRING????
+		//info_array[count].name = curr_task->comm[count];
+		//info_array_kern[count].state = curr_task->state;
+		//info_array[count].uid = cred->current_uid();
+		printk("\t parent is:  \"%s\" (pid: %li) \n",curr_task->comm, info_array_kern[count].pid);
+		
+
+		// HOW TO GET PROCESS STATE FROM CURR_TASK???
+		
+	}
+	
+
+	//while(current != lin)
+
+	//for(i = 0; i < size; i++){//change to num_filled once initialsized
+	
+	errorCheck = copy_to_user(info_array, info_array_kern, sizeof(struct process_info));
+	if(errorCheck != 0){
+		printk("copy stats structure failed\n");
+		return -EFAULT;
+	}
+	//}
+
+
+    return 0;
+}
diff -rupN ../cmpt300/linuxv4.13/Makefile linux-4.13/Makefile
--- ../cmpt300/linuxv4.13/Makefile	2017-09-03 13:56:17.000000000 -0700
+++ linux-4.13/Makefile	2019-07-26 16:53:08.000000000 -0700
@@ -941,7 +941,7 @@ endif
 
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/ cs300/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
