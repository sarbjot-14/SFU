#ProblemSet1
##gcc_and_gdb.txt
### May 20, 2019

2a) What does the -E option mean? 
outputs the current preprocessed program and does not compile the program

What does the pre-processor do?
Substitute text in the program following the pre-processor commands beginning with #. Targets header files, macro expansions, ect


2b) What file is created by this command?
hello.o

State its name and explain what it is.
This is an object file. The source code was compiled into machine language

2c) What do you get?
a.out which is an executable file. 

2d) What error message do you see? 
undefined reference to `main'


Briefly explain this error.
Executable file needs an entry point. The linker is trying to find main but cannot, therefore error is thrown.

2e) Any error message now?
No

Explain the differences in the outputs you see above, before
and after commenting out main() and with and without -c.

	-Before commenting out main() and with -c:
	compiles to an object file with no errors

	-Before commenting out main() and without -c:
	outputs exectuable file with no errors

	-After commenting out main() and with -c:
	outputs object file with no problem

	-After commenting out main() and without -c:
	Linker cannot find main therefore throws error


3a)What do you get? What does this error message mean?
Segmentaion fault (core dumped). Happens when program trys to access memory it does not have access to.


3b) What is the name of the function within which segmentation fault occurs?
_nl_global_locale

3c)Which library function we call in hello.c causes the error?//check
strtol_l.c

3d)Record the output. 
(gdb) p argc: $1 = 1
(gdb) p argv:  (char **) 0x7fffffffdea8

What does the value argv means?
It is an array of strings

3e) What does each of these commands do?
(gdb) info local : shows the local variables and their values in the current stack frame
(gdb) info args : shows the values of the current functions arguments

3f) What do you get? 
p argv[0]
$3 = 0x7fffffffe23a "~/cmpt-300/PS1/hello"
p argv[0][1]
$4 = 104 'h'
p argv [1]
$5 = 0x0
Explain why running hello without command line argument leads to
a segmentation fault error?
-Because only one argument is being passed in argv[1], which is a null pointer and when accessing a 
 null pointer, a segmentation fault occurs.

4a)) Use gdb to print out and record the values of the following: x, y, *x, *y, &x, &y.
What do you see? What do they mean?

p x: (int *) 0x0
x is a pointer which is null or also known as 0x0 in hexadecimal

p y: 0
y was initialized to 0, therefore contains 0.

p *x: Cannot access memory at address 0x0
Not allowed to dereference null pointers, because that address is never given memory to store anything

p *y:  Cannot access memory at address 0x0
y is not a pointer. Therefore we are not allowed to dereference it

p &x: (int **) 0x7fffffffdad8
This is the address of the pointer x. This address is a pointer to a pointer.

p &y: (int **) 0x7fffffffdad8
This is the address that contains the value of y, which is 0.

4b) Use gdb to print out and record the value of any of the following which change: x, y,
*x, *y, &x, &y. For each changed value, explain why?

p x: (int *) 0x7fffffffdad4
x now points to y because x = &y replaced the null value with y's address.

p y: 1
since x now points to y the line *x =1 dereferencing x dereferences y and changes y to 1.

p *x: 1
since x points to y. Dereferencing x will give value of y.

p *y: no change

p &x: no change

p &y: no change

4c) Use gdb to print out and record the values of the following: x, y, *x, *y, &x, &y.
What has changed? Why?

p x: (int *) 0x7fff0000000a
-memory address of x is 0x7fffffffdab8
-memory address of y is 0x7fffffffdab4
-since x points to y, and x is beside y, dereferencing *(x+1) is actually dereferencing x
 itself since x is one memory space above y.
-therefore changing x's value.

p y: no change

p *x: Cannot access memory at address 0x7fff0000000a
-Now that x is pointing to a random spot in memory, 
 since the computer did not allocate that space to us
 we do not have access to that memory.

p *y: no change

p &x: no change

p &y: no change

4(d) Use gdb to print out and record the values of the following: x, y, *x, *y, &x, &y.
What values do you see? Explain the changes.

p x: (int *) 0x7fffffffdab4
-points to y's memory address

p y: -9548   and p /x y: 0xffffdab4
-y contains memory address of itself

p /x *x: 0xffffdab4
-x ponts to y, since y contains memory address of y then dereferencing x will give address of y

p *y: no change

p &x: no change

p &y: no change

4(e) What is the option -Wall for?
-The option -Wall is used for displaying all warnings, even the ones the user may
 deem trivial.

//check for final submission

