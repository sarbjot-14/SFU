###Discussion for Assignment 3###

-how to link current_time_in_ms
- search and remove checks (solve problems)
- look for mallocs and free all the allocated memory at end
- use semaphores and mutex locks?????
----------------------
	- add assertions
		- buffer should be empty at this point
		- first candy produced should be first candy eaten (match time produced and factory number)
----------------------
WHAT TO ASK TA'
	- implementaion of locks correct?
	- what to init in init
	- how to implement stats (are we allowed to somehow pass in fact structs or candy structs)

Gurk:
	- Locate lectures which discus the bounded buffer files and anyother related material
	- start getting the threads to work. (deploying factory threads and kid threads)
	- work out timer for when candy was created, when to end program
	- do step 7 8 and 10

Sarb:
	- make sure insert and delete in buffer works perfect
	- start understanding how to implement the locks (semaphores)
	- implement some of locks and semaphores
	- start on statistics







----------------------------
storing some test cases for buffer... delete afterwards:




for(int i =0; i < 10; i++){ //testing...
		myCount++;
		insertCandy();
		/* 
		if(i%3 ==0 && i>0){
			myPrint("extracting");
			candy_t *ret_candy = bbuff_blocking_extract();
			sprintf(sprintString, "returned candy is %d", ret_candy->factory_number);
			myPrint(sprintString);
		}
		*/
	}
	myPrint("extracting");
	candy_t *ret_candy = bbuff_blocking_extract();
	sprintf(sprintString, "returned candy is %d", ret_candy->factory_number);
	myPrint(sprintString);

	myPrint("extracting");
	ret_candy = bbuff_blocking_extract();
	sprintf(sprintString, "returned candy is %d", ret_candy->factory_number);
	myPrint(sprintString);

	myPrint("extracting");
	ret_candy = bbuff_blocking_extract();
	sprintf(sprintString, "returned candy is %d", ret_candy->factory_number);
	myPrint(sprintString);
	myCount++;
	insertCandy();
	myCount++;
	insertCandy();
	myCount++;
	insertCandy();
	myPrint("extracting");
	ret_candy = bbuff_blocking_extract();
	sprintf(sprintString, "returned candy is %d", ret_candy->factory_number);
	myPrint(sprintString);
	myCount++;
	insertCandy();
	for(int i =0; i < 11; i++){ //testing...
		myPrint("extracting");
		ret_candy = bbuff_blocking_extract();
		if(ret_candy!=NULL){
			sprintf(sprintString, "returned candy is %d", ret_candy->factory_number);
			myPrint(sprintString);
		}
		
	}
	myCount++;
	insertCandy();
	myCount++;
	insertCandy();